
package exercicipatrimoni;

import java.awt.Point;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.ListIterator;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 * Conté la classe AfegirMonument on es troba la finestra de creació d'un nou 
 * monument i els seuscomponents visuals.
 * @author 
 */
public class AfegirMonument extends javax.swing.JDialog 
{
    //Atributs=================================================================
    /** Referència a l'objecte de la finestra FinestraPrincipal. */
	private FinestraPrincipal finestraPrincipal;
    /** Base de Dades. */
    private BaseDades bd;
    //=========================================================================   
    /**
     * Constructor parametritzat de la classe AfegirMonument.
     * @param parent La finestra pare d'on deriva la finestra AfegirMonument.
     * @param modal True si la finestra es modal.
     * @param bd Base de dades d' on es treuen les dades dels monuments.
     */
    public AfegirMonument(java.awt.Frame parent, boolean modal, BaseDades bd) 
    {
		// Cridem al constructor de la classe Base (JDialog).
		super(parent, modal);
		this.bd = bd;
        
		// Guardem la referència a la classe FinestraPrincipal en l'atribut.
		finestraPrincipal = (FinestraPrincipal) parent;
		
		// Donem un títol al quadre de diàleg.
		setTitle("Patrimoni - Inserció d'un nou monument");
		
		// Situem el quadre de diàleg en la pantalla.
		Point point = finestraPrincipal.getLocation();
		point.setLocation(point.getX() + 50, point.getY() + 50);
		setLocation(point);
		
		// Impedim que l'usuari pugui canviar el tamany del quadre de diàleg.
		setResizable(false);
		
		// Iniciem els components del diàleg
		initComponents();
    }
    //=========================================================================
    /** Mètode iniciar. Aquest mètode fa visible la finestra entre d'altres 
     * coses.*/
    public void iniciar() throws SQLException
    {
        // Omplir els combobox
        omplirComboComunitat();
        omplirComboTipus();
        
        // Fa visible la finestra.
		setVisible(true);
    }
    //=========================================================================
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelAfegir = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textboxNomMonument = new javax.swing.JTextField();
        textboxAnyAlta = new javax.swing.JTextField();
        comboComunitat = new javax.swing.JComboBox();
        comboTipus = new javax.swing.JComboBox();
        textboxNomFoto = new javax.swing.JTextField();
        panelButtons = new javax.swing.JPanel();
        buttonNetejar = new javax.swing.JButton();
        buttonAfegir = new javax.swing.JButton();
        buttonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Nom del monument:");

        jLabel2.setText("Any d'alta:");

        jLabel3.setText("Comunitat autònoma:");

        jLabel4.setText("Tipus de patrimoni:");

        jLabel5.setText("Nom de la foto:");

        comboComunitat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));

        comboTipus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));

        javax.swing.GroupLayout panelAfegirLayout = new javax.swing.GroupLayout(panelAfegir);
        panelAfegir.setLayout(panelAfegirLayout);
        panelAfegirLayout.setHorizontalGroup(
            panelAfegirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAfegirLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAfegirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAfegirLayout.createSequentialGroup()
                        .addGroup(panelAfegirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(25, 25, 25)
                        .addGroup(panelAfegirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textboxNomMonument)
                            .addGroup(panelAfegirLayout.createSequentialGroup()
                                .addComponent(textboxAnyAlta, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(panelAfegirLayout.createSequentialGroup()
                        .addGroup(panelAfegirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAfegirLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(30, 30, 30)
                                .addComponent(comboTipus, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelAfegirLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(comboComunitat, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelAfegirLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(53, 53, 53)
                        .addComponent(textboxNomFoto)))
                .addContainerGap())
        );
        panelAfegirLayout.setVerticalGroup(
            panelAfegirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAfegirLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAfegirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelAfegirLayout.createSequentialGroup()
                        .addGroup(panelAfegirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(textboxNomMonument, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelAfegirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(textboxAnyAlta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3))
                    .addComponent(comboComunitat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAfegirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboTipus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAfegirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textboxNomFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonNetejar.setText("Netejar");
        buttonNetejar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNetejarActionPerformed(evt);
            }
        });

        buttonAfegir.setText("Afegir");
        buttonAfegir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAfegirActionPerformed(evt);
            }
        });

        buttonCancelar.setText("Cancel·lar");
        buttonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelButtonsLayout = new javax.swing.GroupLayout(panelButtons);
        panelButtons.setLayout(panelButtonsLayout);
        panelButtonsLayout.setHorizontalGroup(
            panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelButtonsLayout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(buttonNetejar)
                .addGap(18, 18, 18)
                .addComponent(buttonAfegir, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonCancelar)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        panelButtonsLayout.setVerticalGroup(
            panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelButtonsLayout.createSequentialGroup()
                .addGroup(panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonNetejar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAfegir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelAfegir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelAfegir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //=========================================================================
    /**
     * Mètode que neteja la pantalla de dades quan es prem el botó 
     * buttonNetejar.
     * @param evt 
     */
    private void buttonNetejarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNetejarActionPerformed
        textboxNomMonument.setText("");
        textboxAnyAlta.setText("");
        comboComunitat.setSelectedIndex(0);
        comboTipus.setSelectedIndex(0);
        textboxNomFoto.setText("");
    }//GEN-LAST:event_buttonNetejarActionPerformed
    //=========================================================================
    /**
     * Mètode que afegeix un nou Monument amb les dades introduides a la 
     * finestra quan es clicka sobre el botó buttonAfegir. Si falten dades o 
     * si son incorrectes, donarà error, i al afegir un nou monument tanca la 
     * finestra i reinicia la finestra principal.
     * @param evt 
     */
    private void buttonAfegirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAfegirActionPerformed
        try
        {
            if(!textboxNomMonument.getText().equals("") 
               && !textboxAnyAlta.getText().equals("")
               && comboComunitat.getSelectedItem() != null 
               && comboTipus.getSelectedItem() != null 
               && !textboxNomFoto.getText().equals(""))
            {
                String nomMonument = textboxNomMonument.getText();
                int anyAlta = Integer.parseInt(textboxAnyAlta.getText());
                String nomComunitat = 
                                    comboComunitat.getSelectedItem().toString();
                String nomTipus = comboTipus.getSelectedItem().toString();             
                String nomFoto = textboxNomFoto.getText();
                
                
                int idComunitat = -1;
                char idTipus = ' ';
                //Recuperar el id de comunitat=================================
                ArrayList<Comunitat> comunitats = bd.recuperarComunitats();
                boolean trobat = false;
                int num = comunitats.size();
                int i = 0;
                while(i < num && !trobat)
                {
                    if(comunitats.get(i).getNom().equals(nomComunitat))
                    {
                        idComunitat = comunitats.get(i).getId();
                        trobat = true;
                    }
                    i++;
                }
                //Recuperar el id de tipus=====================================
                ArrayList<TipusMonument> tipusMonuments = bd.recuperarTipus();
                trobat = false;
                num = tipusMonuments.size();
                i = 0;
                while(i < num && !trobat)
                {
                    if(tipusMonuments.get(i).getNom().equals(nomTipus))
                    {
                        idTipus = tipusMonuments.get(i).getId();
                        trobat = true;
                    }
                    i++;
                }       
                //=============================================================
                //Trobar el id de Monument mes gran de tots====================
                ArrayList<Monument> monuments = bd.recuperarMonuments();
                num = monuments.size();
                int maxIdMonument = 0;
                for(i = 0; i < num; i++)
                {
                    if(monuments.get(i).getId() > maxIdMonument)
                    {
                        maxIdMonument = monuments.get(i).getId();
                    }
                }
                //=============================================================           
                
                if(idComunitat != -1 && idTipus != ' ' && maxIdMonument != 0)
                {
                    //Crear un nou ID superior al màxim en 1.
                    int idMonument = maxIdMonument + 1;
                    
                    Comunitat comunitat = new Comunitat(idComunitat, 
                                                        nomComunitat);
                    TipusMonument tipus = new TipusMonument(idTipus, 
                                                                nomTipus);
                    
                    Monument monument = new Monument(idMonument, nomMonument, 
                                                     anyAlta, tipus, comunitat, 
                                                     nomFoto);
                    bd.insertarMonument(monument);
                    
                    // Tanquem el quadre de diàleg
                    dispose();
                    
                    // Tornem a recargar la FinestraPrincipal.
                    finestraPrincipal.dispose();
                    FinestraPrincipal fp = new FinestraPrincipal(bd);
                    fp.iniciar();
                    
                    // Donem missatge de que tot ha anat be.
                    JOptionPane.showMessageDialog(null, 
										     "Monument introduit correctament.",
										     "Avís",
										     JOptionPane.INFORMATION_MESSAGE);
                }
                else
                {
                    throw new Exception("No s'ha pogut afegir el monument.");
                }               
            }
            else
            {
                throw new Exception("Faltan dades per introduir.");
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, 
										  e.toString(),
										  "Avís",
										  JOptionPane.CANCEL_OPTION);
        }
    }//GEN-LAST:event_buttonAfegirActionPerformed
    //=========================================================================
    /**
     * Mètode que tanca aquesta finestra.
     * @param evt 
     */
    private void buttonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarActionPerformed
        // Tanquem el quadre de diàleg
		dispose();
    }//GEN-LAST:event_buttonCancelarActionPerformed
    //=========================================================================
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAfegir;
    private javax.swing.JButton buttonCancelar;
    private javax.swing.JButton buttonNetejar;
    private javax.swing.JComboBox comboComunitat;
    private javax.swing.JComboBox comboTipus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel panelAfegir;
    private javax.swing.JPanel panelButtons;
    private javax.swing.JTextField textboxAnyAlta;
    private javax.swing.JTextField textboxNomFoto;
    private javax.swing.JTextField textboxNomMonument;
    // End of variables declaration//GEN-END:variables
    //=========================================================================
    /**
     * Mètode que omple el comboComunitat amb totes les comunitats de la taula
     * comunitats de la BD.
     */
	private void omplirComboComunitat() throws SQLException
	{
		// Recuperem el model existent
		DefaultComboBoxModel modelComunitat = 
                               (DefaultComboBoxModel) comboComunitat.getModel();
		
		// Buidem les dades existents
		modelComunitat.removeAllElements();
        
		// Afegim els nous elements
        modelComunitat.addElement("");
        ArrayList<Comunitat> comunitats = bd.recuperarComunitats();
        ListIterator<Comunitat> iterador = comunitats.listIterator();
        
        while(iterador.hasNext())
        {
            modelComunitat.addElement(iterador.next().getNom());
        }
        
	}
    //=========================================================================
    /**
     * Mètode que omple el comboTipus amb tots els tipus de monument de la taula
     * tipus de la BD.
     */
	private void omplirComboTipus() throws SQLException
	{
		// Recuperem el model existent
		DefaultComboBoxModel modelTipus = 
                                   (DefaultComboBoxModel) comboTipus.getModel();
		
		// Buidem les dades existents
		modelTipus.removeAllElements();
		
		// Afegim els nous elements
        modelTipus.addElement("");
        ArrayList<TipusMonument> tipusMonuments = bd.recuperarTipus();
        ListIterator<TipusMonument> iterador = tipusMonuments.listIterator();
        
        while(iterador.hasNext())
        {
            modelTipus.addElement(iterador.next().getNom());
        }		
	}
    //=========================================================================
}
